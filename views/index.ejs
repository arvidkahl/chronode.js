<% layout('layout') -%>

<div class="container">
      <div class="header">
        <ul class="nav nav-pills pull-right">
          <li class="active"><a href="#">Home</a></li>
          <li><a href="#">About</a></li>
          <li><a href="#">Contact</a></li>
        </ul>
        <h3 class="text-muted">what version was?</h3>
      </div>

      <div class="well well-lg">
      <form role="form">

        <div class="form-group col-sm-6">

         <div class="bs-example bs-example-tabs">
      <ul id="myTab" class="nav nav-tabs">
        <li class="active"><a href="#parse_json" data-toggle="tab">package.json</a></li>
        <li class=""><a href="#npm_module" data-toggle="tab">npm modules</a></li>
      </ul>
      <div id="myTabContent" class="tab-content">
        <div class="tab-pane fade active in" id="parse_json">
          <div class="container">
            <label for="module" class="">Paste your package.json here</label>
            <textarea id="package_json" class="form-control" rows="5"></textarea>
            <button type="button" id='package_send' class="btn btn-default">Parse package.json</button>
          </div>
        </div>
        <div class="tab-pane fade" id="npm_module">
          <div class="container">
            <label for="module" class="">Module name</label>
            <div class="input-group">
              <input id="module" type="text" class="form-control" placeholder="e.g. coffee-script"></input>
              <span class="input-group-btn">
                <button type="button" id='module_send' class="btn btn-default">Check npm</button>
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>


        </div>
        <div class="form-group col-sm-6">

          <table id="module_cache" class="table table-condensed">
            <thead>
              <th>module name</th>
              <th>latest version</th>
              <th># of versions</th>
            </thead>
            <tbody></tbody>
          </table>


          <label for="date" class="">Date to check</label>
          <div class="input-group">
          <input id="date" type="text" class="form-control"></input>
          <span class="input-group-btn">
            <button type="button" id='calculate' class="btn btn-default">Show this date's version</button>
          </span>
          </div>
        </div>
      </form>

        <p id='result' class="container">This area will display data.</p>
      </div>


      <div class="row marketing">
        <div class="col-lg-6">
          <h4>Purpose</h4>
          <p>If you want to find out which version a certain module was at any point in time, this tool will check the version history.</p>
        </div>

        <div class="col-lg-6">
          <h4>Tech</h4>
          <p>It looks up the npm show command output for version and time information.</p>
        </div>
      </div>

      <div class="footer">
        <p>Â© Arvid Kahl 2013</p>
      </div>
    </div>
  <div>



  <script type="text/javascript">

    timeData = {}

    function addModule(name,data){

      var row = $("#module_cache").find('tbody').append($('<tr>'))

      var data_ = []
      for (date in data) {
        data_.push({
          version : date,
          time : data[date]
        })
      }
      data_.sort()

      row.append($("<td>"+name+"</td><td>"+data_[data_.length-1].version+"</td><td>"+data_.length+"</td>"));
    }

    $(document).ready(function(){

      $( "#date" ).datepicker();

      $("#calculate").on('click', function() {
        var currentDate = $( "#date" ).datepicker( "getDate" );

        $("#result").html('modules at time '+currentDate);
        for (name in timeData) {

          var closest = {time : 0, version : 0}

          // adding data to local data collection
          times = timeData[name];

          for (var version in times) {
            time = new Date(times[version])
            if (time > new Date(closest.time) && time < currentDate) {
              closest = {
                version : version,
                time : times[version]
              }
            }
          };

          $("#result").append("<p>"+name+" version: "+closest.version+"</p>");

        }

      });

      $("#module_send").on('click',function(){
        var name = $("#module").val().trim();
        console.log(name+" AJAX request started");
        $.ajax({
          url: "/",
          type:'POST',
          data: {
            names: [name]
          },
          success: function( data ) {
            time = JSON.parse(data)
            for (name_ in time) {
              timeData[name_] = time[name_];
              addModule(name_,time[name_]);
            }
          }
        });
      });

      $("#package_send").on('click',function(){
        var json_content = $("#package_json").val().trim();
        var deps = [];

        package_data = {}

        try {
          package_data = JSON.parse(json_content)

        } catch (e){
          console.log('not json');
        }

        if (Object.keys(package_data).length>0){
          if(package_data.name){deps.push(package_data.name)}
          if(package_data.dependencies){
            for (dep in package_data.dependencies) {
              deps.push(dep);
            }
          }
          console.log(name+" MULTI AJAX request started",deps);
          $.ajax({
            url: "/",
            type:'POST',
            data: {
              names: deps
            },
            success: function( data ) {
              time = JSON.parse(data)
              for (name_ in time) {
                timeData[name_] = time[name_];
                addModule(name_,time[name_]);
              }
            }
          });
        }
      });
    });
  </script>
</div>
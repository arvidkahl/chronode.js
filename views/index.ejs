<% layout('layout') -%>
<div class="container">
  <div id="main-nav" class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="#">Chronode</a>
      </div>
      <div class="navbar-collapse collapse">
        <ul class="nav navbar-nav">
          <li class="active"><a href="#home">Home</a></li>
          <li><a href="#about">About</a></li>
          <li><a href="#tech">Tech</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="row" id="home">
    <div class="page-header">
      <h1>Chronode <small>What the hell is this?</small></h1>
    </div>
    <div class="container">
      <p>Want to know what version your node.js app module dependencies were two years ago, when you built "that project" but forgot to specify anything but <code>"*"</code> in your <code>package.json</code>?</p>
      <p>Yeah. <strong>Exactly</strong>. This tool allows you to find out what the most current version those modules were on any given day (that npm can remember).</p>
    </div>
  </div>
  <div class="row">
    <div class="col-sm-6">
      <h3><span class="glyphicon glyphicon-plus"></span> Add Modules</h3>
      <div class="">
        <ul id="add-tab" class="nav nav-tabs">
          <li class="active">
            <a href="#parse_json" data-toggle="tab"><span class="glyphicon glyphicon-import"></span> From package.json</a>
          </li>
          <li class="">
            <a href="#npm_module" data-toggle="tab"><span class="glyphicon glyphicon-plus"></span> Single Modules</a>
          </li>
        </ul>
        <div id="add-tab-content" class="tab-content">
          <div class="tab-pane fade active in" id="parse_json">
            <p>You can add your <code>package.json</code> contents here. The dependency modules will be added to your Current Modules on the right.</p>
            <div class="form-group">
              <label for="package_json" class="">package.json content</label>
              <textarea id="package_json" class="form-control" rows="8"></textarea>
            </div>
            <div class="checkbox">
              <label>
                <input id="allow-dev" type="checkbox"> Include devDependencies
              </label>
            </div>
            <div class="checkbox">
              <label>
                <input id="allow-bundled" type="checkbox"> Include bundledDependencies
              </label>
            </div>
            <div class="checkbox">
              <label>
                <input id="allow-optional" type="checkbox"> Include optionalDependencies
              </label>
            </div>
            <button type="button" id='package_send' class="btn btn-default" data-loading-text="Loading module data...">Add Modules from package.json</button>
          </div>
          <div class="tab-pane fade" id="npm_module">
            <p>You can add single or comma-separated npm module names here.</p>
            <div class="form-group">
              <label for="module" class="">Module name</label>
              <div class="input-group">
                <input id="module" type="text" class="form-control" placeholder="e.g. coffee-script"> <span class="input-group-btn"><button type="button" id='module_send' class="btn btn-default" data-loading-text="Loading module data..."><span class="input-group-btn"><span class="input-group-btn">Add Module(s)</span></span></button></span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="form-group col-sm-6">
      <h3><span class="glyphicon glyphicon-list"></span> Current Modules</h3>
      <table id="module_cache" class="table table-condensed">
        <thead>
          <tr>
            <th>Module name</th>
            <th>Latest version</th>
            <th># of versions</th>
          </tr>
          <tbody></tbody>
        </thead>
      </table>
    </div>
  </div>
  <div class="row ">
    <div class="col-sm-6">
      <h3><span class="glyphicon glyphicon-calendar"></span> Go back in time!</h3>
      <label for="date" class="">Date to check</label>
      <div class="input-group">
        <input id="date" type="text" class="form-control"> <span class="input-group-btn"><button type="button" id='calculate' class="btn btn-primary"><span class="input-group-btn">Show versions</span></button></span>
      </div>
    </div>
    <div class="col-sm-6">
      <h3><span class="glyphicon glyphicon-time"></span> Version data</h3>
      <div id="result" class="well well-lg">
        No version data yet.
      </div>
    </div>
  </div>
  <div class="row marketing">
    <div class="col-sm-6" id="about">
      <h4>About</h4>
      <p>This tool came to life because I made the rookie mistake of not adding version numbers to the <code>package.json</code> of my first few <a href="http://nodejs.org">node.js</a> apps. Many months later, I tried running them on a different environment, only to find myself amid broken code due to API changes in most of the modules I was using. At that point, I needed a solution to find out, which versions of my dependencies were being used when I wrote the apps. This tool is the result of that need.</p>
    </div>
    <div class="col-sm-6" id="tech">
      <h4>Tech</h4>
      <p>This tool looks up the <code>npm view</code> command output for version and time information, server-side. It employs data caching.</p>
      <p>You can find the source at <a target="_new" href="https://github.com/arvidkahl/chronode.js">GitHub</a>.</p>
      <p>Serverside logic is written in CoffeeScript using Express and ejs, client logic is JavaScript, the layout comes from Bootstrap 3.</p>
    </div>
  </div>
  <div class="footer">
    <p>Â© <a href="mailto:mail@arvidkahl.de">Arvid Kahl</a> 2013</p>
  </div>
</div>

<script type="text/javascript">

    // global data cache - this will contain the time data of all selected modules
    timeData = {}

    // wrapper for changing notifications plugins
    function notification(title,options){
      if(!options) options = "info"
      $.notify(title,{
        className : options,
        globalPosition : 'top center'
      });
    }

    // add module to the table
    function addModule(name,data){
      var row = $('<tr>');
      var data_ = [];

      $("#module_cache").find('tbody').append(row);

      for (date in data) {
        data_.push({
          version : date,
          time : data[date]
        })
      }
      data_.sort()

      row.append($("<td>"+name+"</td><td>"+data_[data_.length-1].version+"</td><td>"+data_.length+'<a class="close" href="#"><span class="pull-right glyphicon glyphicon-remove"></span></a></td>'));
      row.find('a.close').on('click',function(e){
        row.remove();
        delete timeData[name];
        e.preventDefault();
      });
    }

    // add calculated values to the result box
    function addResult(){
      var currentDate = $( "#date" ).datepicker( "getDate" );
      currentMoment = moment(currentDate)

      $("#result").html("<h4>Module versions <small>at "+currentMoment.format('L')+" ("+currentMoment.startOf('day').fromNow()+")</small></h4>");

      $("#result").append("<table id='result-table' class='table table-condensed'><thead><th>Name</th><th>Version</th></thead><tbody></tbody></table>");

      for (name in timeData) {

        var closest = {time : 0, version : 0}

        // adding data to local data collection
        times = timeData[name];

        for (var version in times) {
          time = new Date(times[version])
          if (time > new Date(closest.time) && time < currentDate) {
            closest = {
              version : version,
              time : times[version]
            }
          }
        };

        $("#result #result-table tbody").append("<tr data-name='"+name+"'><td><a target='_new' href='https://npmjs.org/package/"+name+"'>"+name+"</a></td><td>"+closest.version+'</td></tr>');
      }
    }

    // get module data from the backend
    function getModuleData(button,data){
        button = $(button);
        button.button('loading');

        $.ajax({
          url: "/",
          type:'POST',
          data: {
            names: data
          },
          error: function(error) {
              button.button('reset');
              notification('Connection failed.','warn')
            },

          success: function( data ) {
            var time = {}
            try {
              time = JSON.parse(data)
            } catch (e){
              console.log('Could not parse response.');
            }
            button.button('reset');

            for (name_ in time) {
              if (!timeData[name_]) addModule(name_,time[name_]);
              timeData[name_] = time[name_];
            }
          }
        });

    }

    // init
    $(document).ready(function(){

      moment().format();

      $('body').scrollspy({ target: '#main-nav' })

      $("#date").datepicker();

      $("#calculate").on('click', function(e) {
        if($("#date").val()) addResult();
        e.preventDefault()
      });

      $("#module_send").on('click',function(e){
        var names = $("#module").val().split(',');
        if(names.length>0) {
          getModuleData(this,names);
        }
        e.preventDefault()
      });

      $("#package_send").on('click',function(e){
        var json_content = $("#package_json").val().trim();
        var deps = [];
        package_data = {}
        try {
          package_data = JSON.parse(json_content)
        } catch (e){
          notification('That\'s not valid JSON.','error')
        }
        if (Object.keys(package_data).length>0){
          if(package_data.name){deps.push(package_data.name)}
          if(package_data.dependencies){
            for (dep in package_data.dependencies) {
              deps.push(dep);
            }

            if($("#allow-dev").prop("checked")==true){
              if(package_data.devDependencies){
                for (dep in package_data.devDependencies) {
                  if(!deps[dep]) deps.push(dep);
                }
              }
            }

            if($("#allow-bundled").prop("checked")==true){
              if(package_data.bundledDependencies){
                for (dep in package_data.bundledDependencies) {
                  if(!deps[dep]) deps.push(dep);
                }
              }
              if(package_data.bundleDependencies){
                for (dep in package_data.bundleDependencies) {
                  if(!deps[dep]) deps.push(dep);
                }
              }
            }

            if($("#allow-optional").prop("checked")==true){
              if(package_data.optionalDependencies){
                for (dep in package_data.optionalDependencies) {
                  if(!deps[dep]) deps.push(dep);
                }
              }
            }

          }
          getModuleData(this,deps);
        }
        e.preventDefault()
      });
    });
</script>